{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"00_Build_DL_Models","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"jzqXONrQeOXw"},"source":["# Deep Learning Models with Keras\n","\n","## Defining Sequential model"]},{"cell_type":"code","metadata":{"id":"j8nSbmRKeHNU"},"source":["from keras.models import Sequential\n","from keras.layers import Dense, Activation\n","\n","model = Sequential() \n","model.add(Dense(4, input_dim=2, activation='relu')) \n","model.add(Dense(1, activation=\"sigmoid\")) \n","          \n","# print model\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dBVW-qoPh7Od"},"source":["## Visualize model"]},{"cell_type":"code","metadata":{"id":"ia5n5YUmfDzE"},"source":["from keras.utils.vis_utils import plot_model\n","\n","plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UVZTAnU7kldM"},"source":["# Functional API\n"]},{"cell_type":"code","metadata":{"id":"w3BOdjdpkoBG"},"source":["from keras.utils import plot_model\n","from keras.models import Model\n","from keras.layers import Input\n","from keras.layers import Dense\n","\n","# define input\n","visible = Input(shape=(10,))\n","\n","# connect layers\n","layer1 = Dense(10, activation='relu')(visible)\n","layer2 = Dense(20, activation='relu')(layer1)\n","layer3 = Dense(10, activation='relu')(layer2)\n","layer4 = Dense(1, activation='sigmoid')(layer3)\n","\n","# finally, we create the model\n","model = Model(inputs=visible, outputs=layer4)\n","\n","# summarize layers\n","model.summary()\n","\n","# plot graph\n","plot_model(model, to_file='multilayer_perceptron_graph.png',  show_shapes=True, show_layer_names=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-Cn2GOYfq6N4"},"source":["# Model training"]},{"cell_type":"code","metadata":{"id":"yRfi6nViq8Ol"},"source":["# build model\n","model = Sequential()\n","model.add(Dense(32, activation='relu', input_dim=100))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","# compile model\n","model.compile(optimizer='rmsprop',\n","              loss='binary_crossentropy',\n","              metrics=['accuracy'])\n","\n","# Generate dummy data\n","import numpy as np\n","data = np.random.random((100000, 100))\n","labels = np.random.randint(2, size=(100000, 1))\n","\n","# Train the model, iterating on the data in batches of 32 samples\n","model.fit(data, labels, epochs=10, batch_size=1)\n","\n","# save model\n","model.save(\"model.h5\")\n","print(\"Model trained and saved!\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nXX91qlYro-T"},"source":["from keras.models import load_model\n","\n","# load model\n","loaded_model = load_model(\"model.h5\")\n","\n","# predict\n","data_example = np.random.random((1, 100))\n","loaded_model.predict(data_example)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0D9yPyzikUb5"},"source":["# Custom model\n","\n","Let's build this model using Sequential & Functional API\n","![alt text](https://miro.medium.com/max/1400/1*3fA77_mLNiJTSgZFhYnU0Q@2x.png)"]},{"cell_type":"code","metadata":{"id":"KRRczQwF-32p"},"source":["#Exercise\n","#Sequential\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o5EYBtpb-7EN"},"source":["#Functional\n"],"execution_count":null,"outputs":[]}]}