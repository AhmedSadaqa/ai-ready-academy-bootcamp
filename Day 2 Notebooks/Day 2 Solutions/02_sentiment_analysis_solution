{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"02_sentiment_analysis_solution","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Q24hSxA4tA6n"},"source":["# Text classification\n","\n","Text classification is one of the important tasks of text mining\n","\n","![alt text](http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1535125878/NLTK3_zwbdgg.png)\n","\n","In this notebook, we will perform Sentiment Analysis on IMDB movies reviews. Sentiment Analysis is the art of extracting people's opinion from digital text. We will use a regression model from Scikit-Learn able to predict the sentiment given a movie review. \n","\n","We will use [the IMDB movie review dataset](http://ai.stanford.edu/~amaas/data/sentiment/), which consists of 50,000 movies review (50% are positive, 50% are negative)."]},{"cell_type":"markdown","metadata":{"id":"0O1jA8byt4bV"},"source":["The libraries needed in this exercise are:\n","* [Numpy](http://www.numpy.org/) — a package for scientific computing.\n","* [Pandas](https://pandas.pydata.org/) — a library providing high-performance, easy-to-use data structures and data analysis tools for the Python\n","* [Matplotlib](https://matplotlib.org/) — a package for plotting & visualizations.\n","* [scikit-learn](http://scikit-learn.org/stable/index.html) — a tool for data mining and data analysis.\n","* [NLTK](http://www.nltk.org/) — a platform to work with natural language."]},{"cell_type":"markdown","metadata":{"id":"844CS6rf57X7"},"source":["##Loading the data"]},{"cell_type":"markdown","metadata":{"id":"QAt6rj955meo"},"source":["### Importing the libraries and necessary dictionaries"]},{"cell_type":"code","metadata":{"id":"RRN4WqkltlB5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744049546,"user_tz":-120,"elapsed":3809,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"5fb09d04-aeb7-4174-d006-67cf0d9e07e5"},"source":["import numpy as np\n","import pandas as pd\n","import nltk\n","import matplotlib.pyplot as plt\n","from tensorflow import keras\n","\n","# download Punkt Sentence Tokenizer\n","nltk.download('punkt')\n","# download stopwords\n","nltk.download('stopwords')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"7duM74C95rhN"},"source":["### Loading the dataset in our directory"]},{"cell_type":"code","metadata":{"id":"c48UYWDcg3hR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744053292,"user_tz":-120,"elapsed":7541,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"1d263c6e-f796-42ea-e771-12d443f27e61"},"source":["# download IMDB dataset\n","!wget \"https://raw.githubusercontent.com/javaidnabi31/Word-Embeddding-Sentiment-Classification/master/movie_data.csv\" -O \"movie_data.csv\"  \n","\n","# list files in current directory\n","!ls -lah  "],"execution_count":2,"outputs":[{"output_type":"stream","text":["--2021-01-27 10:40:49--  https://raw.githubusercontent.com/javaidnabi31/Word-Embeddding-Sentiment-Classification/master/movie_data.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 65862309 (63M) [text/plain]\n","Saving to: ‘movie_data.csv’\n","\n","movie_data.csv      100%[===================>]  62.81M   166MB/s    in 0.4s    \n","\n","2021-01-27 10:40:52 (166 MB/s) - ‘movie_data.csv’ saved [65862309/65862309]\n","\n","total 63M\n","drwxr-xr-x 1 root root 4.0K Jan 27 10:40 .\n","drwxr-xr-x 1 root root 4.0K Jan 27 10:40 ..\n","drwxr-xr-x 1 root root 4.0K Jan 20 17:27 .config\n","-rw-r--r-- 1 root root  63M Jan 27 10:40 movie_data.csv\n","drwxr-xr-x 1 root root 4.0K Jan 20 17:27 sample_data\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"77spW4xt5y4R"},"source":["###Reading the dataset file and getting info on it\n","Using pandas to read the csv file and displaying the first 5 rows"]},{"cell_type":"code","metadata":{"id":"R0A5QhDlteWj","colab":{"base_uri":"https://localhost:8080/","height":198},"executionInfo":{"status":"ok","timestamp":1611744053725,"user_tz":-120,"elapsed":7966,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"d29e38d5-0a0b-4287-f5ff-91f9114e480d"},"source":["# path to IMDB dataseet\n","datapath = \"movie_data.csv\"\n","\n","# read file (dataset) into our program using pandas\n","data = pd.read_csv(datapath)\n","\n","# display first 5 rows\n","data.head()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I went and saw this movie last night after bei...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Actor turned director Bill Paxton follows up h...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>As a recreational golfer with some knowledge o...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>I saw this film in a sneak preview, and it is ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Bill Paxton has taken the true story of the 19...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              review  sentiment\n","0  I went and saw this movie last night after bei...          1\n","1  Actor turned director Bill Paxton follows up h...          1\n","2  As a recreational golfer with some knowledge o...          1\n","3  I saw this film in a sneak preview, and it is ...          1\n","4  Bill Paxton has taken the true story of the 19...          1"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"t8oHmgm-6qK2"},"source":["Getting info on our dataset"]},{"cell_type":"code","metadata":{"id":"uQVx6AhqhAiB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744053725,"user_tz":-120,"elapsed":7964,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"66138431-e170-4812-882b-cfa99c3a3daa"},"source":["data.info()"],"execution_count":4,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 50000 entries, 0 to 49999\n","Data columns (total 2 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   review     50000 non-null  object\n"," 1   sentiment  50000 non-null  int64 \n","dtypes: int64(1), object(1)\n","memory usage: 781.4+ KB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cPbcG_8k54JZ"},"source":["A balanced dataset in sentiment analysis is a dataset which holds an equal amount of positive sentiment data and negative sentiment data, meaning 50% of the data is positive and 50% is negative"]},{"cell_type":"code","metadata":{"id":"q12nMYY5vPhn","colab":{"base_uri":"https://localhost:8080/","height":314},"executionInfo":{"status":"ok","timestamp":1611744054422,"user_tz":-120,"elapsed":8658,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"52799b07-47e6-4f4d-9afa-af08fd75cd85"},"source":["# check if dataset is balanced (number of positive sentiment = number of negative sentiment) \n","# by plotting the different classes\n","data.sentiment.value_counts().plot(kind = 'bar')\n","\n","# print the values count\n","print(data.sentiment.value_counts())"],"execution_count":5,"outputs":[{"output_type":"stream","text":["1    25000\n","0    25000\n","Name: sentiment, dtype: int64\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"R4uAuueIwKkS"},"source":["## Text cleaning"]},{"cell_type":"code","metadata":{"id":"qCxs0pSovUOa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744054423,"user_tz":-120,"elapsed":8657,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"62bc925c-e77b-4bec-bb66-c80b77c2b81a"},"source":["print(data.review[10])"],"execution_count":6,"outputs":[{"output_type":"stream","text":["I loved this movie from beginning to end.I am a musician and i let drugs get in the way of my some of the things i used to love(skateboarding,drawing) but my friends were always there for me.Music was like my rehab,life support,and my drug.It changed my life.I can totally relate to this movie and i wish there was more i could say.This movie left me speechless to be honest.I just saw it on the Ifc channel.I usually hate having satellite but this was a perk of having satellite.The ifc channel shows some really great movies and without it I never would have found this movie.Im not a big fan of the international films because i find that a lot of the don't do a very good job on translating lines.I mean the obvious language barrier leaves you to just believe thats what they are saying but its not that big of a deal i guess.I almost never got to see this AMAZING movie.Good thing i stayed up for it instead of going to bed..well earlier than usual.lol.I hope you all enjoy the hell of this movie and Love this movie just as much as i did.I wish i could type this all in caps but its again the rules i guess thats shouting but it would really show my excitement for the film.I Give It Three Thumbs Way Up!<br /><br />This Movie Blew ME AWAY!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lAvczEBgxUWl"},"source":["Let's define a function that would clean each movie review (sentence)"]},{"cell_type":"code","metadata":{"id":"eKKIsHqZwRJR","executionInfo":{"status":"ok","timestamp":1611744054424,"user_tz":-120,"elapsed":8655,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}}},"source":["import re\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.stem.porter import PorterStemmer\n","\n","english_stopwords = stopwords.words('english')\n","stemmer = PorterStemmer()\n","\n","# define cleaning function\n","def clean_review(text):\n","  # convert to lower case\n","  text = text.lower()\n","  \n","  # remove non alphabetic characters ^\n","  text = re.sub(r'[^a-z]', ' ', text)\n","  \n","  # stem words\n","  # tokenize sentences\n","  tokens = word_tokenize(text)\n","\n","  # Porter Stemmer\n","  stemmed = [stemmer.stem(word) for word in tokens]\n","\n","  # reconstruct the text\n","  text = ' '.join(stemmed)\n","\n","  # remove stopwords\n","  text = ' '.join([word for word in text.split() if word not in english_stopwords])\n","\n","  return text"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-NIqPBfK67Zc"},"source":["And try it out on an instance of the dataset"]},{"cell_type":"code","metadata":{"id":"W4Bn3r1wzvwR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744054427,"user_tz":-120,"elapsed":8656,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"25843061-6b99-4aad-c6c3-96827f3aa8b6"},"source":["print(data['review'][1])\n","print(clean_review(data['review'][1]))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Actor turned director Bill Paxton follows up his promising debut, the Gothic-horror \"Frailty\", with this family friendly sports drama about the 1913 U.S. Open where a young American caddy rises from his humble background to play against his Bristish idol in what was dubbed as \"The Greatest Game Ever Played.\" I'm no fan of golf, and these scrappy underdog sports flicks are a dime a dozen (most recently done to grand effect with \"Miracle\" and \"Cinderella Man\"), but some how this film was enthralling all the same.<br /><br />The film starts with some creative opening credits (imagine a Disneyfied version of the animated opening credits of HBO's \"Carnivale\" and \"Rome\"), but lumbers along slowly for its first by-the-numbers hour. Once the action moves to the U.S. Open things pick up very well. Paxton does a nice job and shows a knack for effective directorial flourishes (I loved the rain-soaked montage of the action on day two of the open) that propel the plot further or add some unexpected psychological depth to the proceedings. There's some compelling character development when the British Harry Vardon is haunted by images of the aristocrats in black suits and top hats who destroyed his family cottage as a child to make way for a golf course. He also does a good job of visually depicting what goes on in the players' heads under pressure. Golf, a painfully boring sport, is brought vividly alive here. Credit should also be given the set designers and costume department for creating an engaging period-piece atmosphere of London and Boston at the beginning of the twentieth century.<br /><br />You know how this is going to end not only because it's based on a true story but also because films in this genre follow the same template over and over, but Paxton puts on a better than average show and perhaps indicates more talent behind the camera than he ever had in front of it. Despite the formulaic nature, this is a nice and easy film to root for that deserves to find an audience.\n","actor turn director bill paxton follow hi promis debut gothic horror frailti thi famili friendli sport drama u open young american caddi rise hi humbl background play hi bristish idol wa dub greatest game ever play fan golf scrappi underdog sport flick dime dozen recent done grand effect miracl cinderella man thi film wa enthral br br film start creativ open credit imagin disneyfi version anim open credit hbo carnival rome lumber along slowli first number hour onc action move u open thing pick veri well paxton doe nice job show knack effect directori flourish love rain soak montag action day two open propel plot add unexpect psycholog depth proceed compel charact develop british harri vardon haunt imag aristocrat black suit top hat destroy hi famili cottag child make way golf cours also doe good job visual depict goe player head pressur golf pain bore sport brought vividli aliv credit also given set design costum depart creat engag period piec atmospher london boston begin twentieth centuri br br know thi go end onli becaus base true stori also becaus film thi genr follow templat paxton put better averag show perhap indic talent behind camera ever front despit formula natur thi nice easi film root deserv find audienc\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"24Ycze9C6_yb"},"source":["And now clean the entire dataset reviews"]},{"cell_type":"code","metadata":{"id":"6kHxWkPTz5eA","colab":{"base_uri":"https://localhost:8080/","height":198},"executionInfo":{"status":"ok","timestamp":1611744256932,"user_tz":-120,"elapsed":211159,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"6fd85341-3073-4abf-df9f-fb9cb73d1ac4"},"source":["# apply to all dataset\n","data['clean_review'] = data['review'].apply(clean_review)\n","data.head() "],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>sentiment</th>\n","      <th>clean_review</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I went and saw this movie last night after bei...</td>\n","      <td>1</td>\n","      <td>went saw thi movi last night coax friend mine ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Actor turned director Bill Paxton follows up h...</td>\n","      <td>1</td>\n","      <td>actor turn director bill paxton follow hi prom...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>As a recreational golfer with some knowledge o...</td>\n","      <td>1</td>\n","      <td>recreat golfer knowledg sport histori wa pleas...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>I saw this film in a sneak preview, and it is ...</td>\n","      <td>1</td>\n","      <td>saw thi film sneak preview delight cinematogra...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Bill Paxton has taken the true story of the 19...</td>\n","      <td>1</td>\n","      <td>bill paxton ha taken true stori us golf open m...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              review  ...                                       clean_review\n","0  I went and saw this movie last night after bei...  ...  went saw thi movi last night coax friend mine ...\n","1  Actor turned director Bill Paxton follows up h...  ...  actor turn director bill paxton follow hi prom...\n","2  As a recreational golfer with some knowledge o...  ...  recreat golfer knowledg sport histori wa pleas...\n","3  I saw this film in a sneak preview, and it is ...  ...  saw thi film sneak preview delight cinematogra...\n","4  Bill Paxton has taken the true story of the 19...  ...  bill paxton ha taken true stori us golf open m...\n","\n","[5 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"zkVqSSzu2Ax8"},"source":["## Split dataset for training and testing\n","We will split our data into two subsets: a 50% subset will be used for training the model for prediction and the remaining 50% will be used for evaluating or testing its performance. The random state ensures reproducibility of the results."]},{"cell_type":"code","metadata":{"id":"QPHlwVS71brN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744256934,"user_tz":-120,"elapsed":211158,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"1b378a3b-3d1a-426b-be5f-8608ee99deb0"},"source":["from sklearn.model_selection import train_test_split\n"," \n","X = data['clean_review'].values\n","y = data['sentiment'].values\n","\n","# Split data into 50% training & 50% test\n","# Use a random state of 42 for example to ensure having the same split\n","x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.5, random_state = 42)\n","\n","print(x_train.shape, y_train.shape)\n","print(x_test.shape, y_test.shape)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["(25000,) (25000,)\n","(25000,) (25000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Wz23g0nD2nhN"},"source":["## Feature extraction with Bag of Words\n","In this section, let's apply the Bag of Words method to learn the vocabulary of our text and with it transform our training input data."]},{"cell_type":"code","metadata":{"id":"0_B0vrn-2sON","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744263087,"user_tz":-120,"elapsed":217309,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"bc914209-3939-4db4-8aba-bb8641f171d9"},"source":["from sklearn.feature_extraction.text import CountVectorizer\n","\n","# define a CountVectorizer (with binary=True and max_features=10000)\n","vectorizer = CountVectorizer(binary = True, max_features = 10000)\n","\n","# learn the vocabulary of all tokens in our training dataset\n","vectorizer.fit(x_train)\n","\n","# transform x_train to bag of words\n","x_train_bow = vectorizer.transform(x_train)\n","x_test_bow = vectorizer.transform(x_test)\n","\n","print(x_train_bow.shape, y_train.shape)\n","print(x_test_bow.shape, y_test.shape)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["(25000, 10000) (25000,)\n","(25000, 10000) (25000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UtLaJfuw4060"},"source":["## Classification\n","Our data is ready for classification. Let's use [LogisticRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)"]},{"cell_type":"code","metadata":{"id":"9mS51YGO4hfv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744264442,"user_tz":-120,"elapsed":218662,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"c92950c7-bd69-4a8c-8c0c-c39725e69143"},"source":["from sklearn.linear_model import LogisticRegression\n","\n","# define the LogisticRegression classifier\n","model = LogisticRegression()\n","\n","# train the classifier on the training data\n","model.fit(x_train_bow, y_train)\n","\n","# get the mean accuracy on the training data\n","acc_train = model.score(x_train_bow, y_train)\n","\n","print('Training Accuracy:', acc_train)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Training Accuracy: 0.9812\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"2Csw7GEm76E5"},"source":["Evaluating the performance of our model through its accuracy score"]},{"cell_type":"code","metadata":{"id":"sBJnyoqO5NyE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744264443,"user_tz":-120,"elapsed":218661,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"e0b14a46-712e-477c-a3f2-6ff349c06291"},"source":["# Evaluate model with test data\n","acc_test = model.score(x_test_bow, y_test)  \n","print('Test Accuracy:', acc_test)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Test Accuracy: 0.86624\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Yh5927-d6Gq4"},"source":["## Let's use the model to predict!\n","To do so, let's create a predict function which takes as argument our model and the bag of words vectorizer together with a review on which it would predict the sentiment. This review should be cleaned with the `clean_review` function we built, transformed by bag of words and then used for prediction with `model.predict()`."]},{"cell_type":"code","metadata":{"id":"u6kxkZ5m55Ii","executionInfo":{"status":"ok","timestamp":1611744264444,"user_tz":-120,"elapsed":218659,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}}},"source":["# define predict function\n","def predict(model, vectorizer, review):\n","    review = clean_review(review)\n","    review_bow = vectorizer.transform([review])\n","    return model.predict(review_bow)[0]"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7VrNunL18l4a"},"source":["And let's try it out on an example"]},{"cell_type":"code","metadata":{"id":"8z6WCl916flD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611744264445,"user_tz":-120,"elapsed":218656,"user":{"displayName":"Reem Mahmoud","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgGigelxOcEcpGh3mv--UZ8QuqfJHe700x_2E_V3g=s64","userId":"13423890711445448697"}},"outputId":"ab74bbe6-9fee-43f6-d504-0752e5da4431"},"source":["review = 'The movie was great!'\n","predict(model, vectorizer, review)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":15}]}]}